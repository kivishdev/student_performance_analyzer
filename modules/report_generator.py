import os
from datetime import datetime

def save_analysis_report(file_name, analysis_results):
    """
    Save analysis results to a formatted report file.

    Args:
        file_name (str): Original data filename
        analysis_results (dict): Dictionary containing analysis results
                                Keys: 'standard', 'comparative'

    Returns:
        str: Path to the saved report file
    """
    # Create timestamp for unique filename
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    base_name = os.path.splitext(file_name)[0]
    report_filename = f"report_{base_name}_{timestamp}.txt"
    report_path = os.path.join('outputs', 'reports', report_filename)

    try:
        with open(report_path, 'w', encoding='utf-8') as report_file:
            # Write header
            report_file.write("="*70 + "\n")
            report_file.write("        STUDENT PERFORMANCE ANALYSIS REPORT\n")
            report_file.write("    Generated by Student Performance Analyzer with GenAI\n")
            report_file.write("="*70 + "\n\n")

            # Write metadata
            report_file.write(f"Report Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            report_file.write(f"Data Source: {file_name}\n")
            report_file.write(f"Analysis Types: {', '.join(analysis_results.keys()).title()}\n")
            report_file.write("\n" + "="*70 + "\n\n")

            # Write standard analysis if present
            if 'standard' in analysis_results:
                report_file.write("SECTION 1: INDIVIDUAL STUDENT ANALYSIS\n")
                report_file.write("-"*70 + "\n\n")
                report_file.write(analysis_results['standard'])
                report_file.write("\n\n" + "="*70 + "\n\n")

            # Write comparative analysis if present
            if 'comparative' in analysis_results:
                report_file.write("SECTION 2: COMPARATIVE CLASS ANALYSIS\n")
                report_file.write("-"*70 + "\n\n")
                report_file.write(analysis_results['comparative'])
                report_file.write("\n\n" + "="*70 + "\n\n")

            # Write footer
            report_file.write("END OF REPORT\n")
            report_file.write("="*70 + "\n")
            report_file.write("\nThis report contains AI-generated insights.\n")
            report_file.write("Please review and validate before making educational decisions.\n")

        return report_path

    except Exception as e:
        print(f"❌ Error saving report: {e}")
        return None

def generate_summary_statistics(student_data):
    """
    Generate basic statistical summary from DataFrame.

    Args:
        student_data (pd.DataFrame): Student data

    Returns:
        str: Formatted statistics summary
    """
    try:
        import pandas as pd
        
        if not isinstance(student_data, pd.DataFrame):
            return "Statistics not available for text data"

        summary = "STATISTICAL SUMMARY\n"
        summary += "-"*50 + "\n\n"

        # Basic counts
        summary += f"Total Students: {len(student_data)}\n"
        summary += f"Total Columns: {len(student_data.columns)}\n\n"

        # Numeric column statistics
        numeric_cols = student_data.select_dtypes(include=['number']).columns
        if len(numeric_cols) > 0:
            summary += "Numeric Column Statistics:\n"
            for col in numeric_cols:
                summary += f"\n{col.upper()}:\n"
                summary += f"  Mean: {student_data[col].mean():.2f}\n"
                summary += f"  Median: {student_data[col].median():.2f}\n"
                summary += f"  Min: {student_data[col].min():.2f}\n"
                summary += f"  Max: {student_data[col].max():.2f}\n"
                summary += f"  Std Dev: {student_data[col].std():.2f}\n"

        return summary

    except Exception as e:
        return f"Error generating statistics: {e}"